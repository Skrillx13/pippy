{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pippy","text":"<p>Pippy is a blazingly fast, extremely simply, and multi-problem solving package manager. It was built based on the foundations of <code>pip</code>, Pythons default package manager, and still retains a similar approach to package management.</p>"},{"location":"#how-it-works","title":"How it Works:","text":"<p>Pippy works in a almost-identical way to <code>pip</code>, with a few exceptions.</p> <p>The first one is automatically creating virtual enviroments upon installing packages. The second one, is automatically creating a <code>pippy</code> file, that works similarly to a <code>requirements.txt</code>file. And finally, the third one is a better warning system that warns the user whenever packages have conflicts.</p> <p>Pippy's logic is that package management should be simple, but still helpful and \"batteries-included\", and should also be able to be shared with others in a working space.</p>"},{"location":"#key-features","title":"Key Features:","text":"<ul> <li> <p> Easy to install</p> <p>Install <code>pippy</code> with one simple installation script, requiring minimal time and effort.</p> <p> Installation</p> </li> <li> <p> Works like <code>pip</code></p> <p>Works like <code>pip</code>. Pippy dosn't redo concepts but rather expands on them.</p> <p> Core Concepts</p> </li> <li> <p> Made to measure</p> <p>Pippy is easily scaleable, allowing you to manage a lot of packages, without needing to worry about dependency hell.</p> <p> Customization</p> </li> <li> <p> Open Source, GNU</p> <p>You are in good hands with our GNU V3.0 public license. Feel free to help build and contribute to Pippy!</p> <p> License</p> </li> </ul>"},{"location":"#support-us","title":"Support us!","text":"<p>Coding is no easy job. In fact, we, the creators of Pippy have spent about 4+ months working on this project, to get it to where it is today. And that isn't even including the documentation, bug fixing, and issue answering we had to do.</p> <p>What we are trying to say is, if you are using this project, and enjoyed it, please make a donation! We appreciate any support we get.</p> <ul> <li> Link to our Ko-Fi</li> </ul>"},{"location":"#project-implmentation","title":"Project Implmentation","text":"<p>Implementation notes:</p> <ul> <li>V1.0: A bug has occured where it turns out Pippy is incompatible with uv, another Python package manager. Fixing this right now.</li> </ul>"},{"location":"blog/","title":"Blog","text":""},{"location":"community/contributing-docs/","title":"Contributing to the docs","text":""},{"location":"community/contributing/","title":"Contributing","text":""},{"location":"getting-started/concepts/","title":"Key Concepts","text":"<p>Pippy works similarly to <code>pip</code>. Howveer, there are a couple of key concepts we have highlighted here, that are cruicial for you to understand, and suceed.</p>"},{"location":"getting-started/concepts/#virtual-enviroments","title":"Virtual Enviroments","text":"<p>Virtual Enviroments help manage the dependencies for a project, both in development and in production. </p> <p>This is because the more Python projects you have, the more likely it is that you need to work with different versions of Python libraries, or even Python itself.</p> <p>Pippy puts a heavy emphasis on the usage of Virtual Enviroments, which is why it is part of our standard to ensure Pippy automatically creates a virtual enviroment, as well as the <code>Pippyfile</code>, both ensuring you have control over your project dependencies, and preventing things from breaking.</p>"},{"location":"getting-started/concepts/#the-pippyfile","title":"The <code>Pippyfile</code>","text":"<p>Speaking of it, the <code>Pippyfile</code> is a </p>"},{"location":"getting-started/first-steps/","title":"First Steps with Pippy","text":"<p>This document will guide you through the basics of pippy. This includes, installing a package, managing multiple packages, and the <code>Pippy</code> file.</p>"},{"location":"getting-started/first-steps/#installing-a-package","title":"Installing a package","text":"<p>Alright. So first, navigate to the directory you wish for the package to be installed in. For this example, we will be installing requests. Now, run this command:</p> <pre><code>pippy install requests\n</code></pre> <p>Automatically, Pippy will create a virtual enviroment for you to work with. You will notice a <code>venv</code> folder appearing in your project. If <code>venv</code> has not been added to a <code>.gitignore</code>, Pippy will automatically do that for you.</p>"},{"location":"getting-started/first-steps/#introduction-to-pippyfile","title":"Introduction to <code>Pippyfile</code>","text":"<p>You will also notice a <code>Pippyfile</code> appearing in your project. This is the main file for handling all your packages. It should look something like this:</p> <p>The <code>Pippyfile</code> is actually authored in YAML format, as it is the easiest to read and work with.</p> <pre><code>packages:\n  - requests==2.32.3\n  - charset-normalizer==3.4.0\n  - idna==3.10\n  - urllib3==2.2.3\n</code></pre> <p>You will see that the requests package has been listed, along with it's dependencies. More about the <code>Pippyfile</code> can be read here.</p>"},{"location":"getting-started/first-steps/#saving-the-project","title":"Saving the project","text":"<p>Lets assume you saved your project, and are coming back to it the next day. Unlike regular virtual enviroments, Pippy will automatically re-activate the enviroment the moment it detects you have CD'd (Changed directory) into it.</p> <p>If for whatever reason Pippy dosn't automatically re-activate the enviroment, you can run <code>pippy reinit</code> to re-activate the virtual enviroment.</p> <p>Now that you have learnt the very basics of Pippy, you can proceed onto understanding Pippy's concepts.</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>Pippy first has to be installed on a user-wide basis, which can easily be done with the help of our installation scripts.</p> <p>Note</p> <p>Our installation scripts are developed in a seperate repository. Please consider contributing! </p> MacOS/LinuxWindows <pre><code>curl -LsSf https://github.com/Skrillx13/Pippy-Scripts/tree/main/install.sh | sh\n</code></pre> <pre><code>powershell -ExecutionPolicy ByPass -c \"irm https://github.com/Skrillx13/Pippy-Scripts/tree/main/install.sh | iex\"\n</code></pre> <p>This will install Pippy onto your system. You can then verify that Pippy is installed by opening a new terminal, and running:</p> <pre><code>pippy -v\n</code></pre>"},{"location":"getting-started/installation/#installing-a-specific-version","title":"Installing a specific version","text":"<p>While we typically recommend going for the stable release of Pippy, you can also choose to download specific versions. Copy the installation scripts, and replace the number \"3.1\" with your desired version.</p> MacOS/LinuxWindows <pre><code>curl -LsSf https://github.com/Skrillx13/Pippy-Scripts/tree/main/3.1/install.sh | sh\n</code></pre> <pre><code>powershell -ExecutionPolicy ByPass -c \"irm https://github.com/Skrillx13/Pippy-Scripts/tree/main/3.1/install.sh | iex\"\n</code></pre>"},{"location":"getting-started/installation/#installing-for-development","title":"Installing for development","text":"<p>We also offer a developer version of Pippy. Under no circumstances should this be used for production, only for Pippy development.</p> MacOS/LinuxWindows <pre><code>curl -LsSf https://github.com/Skrillx13/Pippy-Scripts/tree/main/dev/install.sh | sh\n</code></pre> <pre><code>powershell -ExecutionPolicy ByPass -c \"irm https://github.com/Skrillx13/Pippy-Scripts/tree/main/dev/install.sh | iex\"\n</code></pre>"},{"location":"getting-started/installation/#managing-multiple-versions","title":"Managing multiple versions","text":"<p>When Pippy is installed onto your computer, it stores itself in a folder. For each version of pippy you download, it will store itself in a new folder, ensuring there are no conflicts between versions.</p> <p>To use a specific version of Pippy (or the development version), you can run the command:</p> <pre><code>pippy -v 3.1\n</code></pre> <p>Replace 3.1 with your desired version. If you are using the dev build, replace 3.1 with \"dev\".</p>"},{"location":"getting-started/installation/#uninstallation","title":"Uninstallation","text":"<p>While we are sad to see you go, we understand. Perhaps you didn't like Pippy. or found a better tool.</p> <p>Pippy will self-uninstall with this command:</p> <pre><code>pippy -s uninstall\n</code></pre> <p>Danger</p> <p>Running <code>pippy -s uninstall</code> will delete all versions of Pippy on your system. To uninstall a version, add the version number before uninstall, like so: <code>pippy -s 3.1 uninstall</code>.</p>"},{"location":"reference/command-line/","title":"Command Line Reference","text":"<p>This document lists all of the possible commands you can run. They have been categorized based on:</p> <ul> <li>Command: Commands to be ran outside of a project.</li> <li>Project: Commands that help with a Python project</li> <li>Pippy: Commands that directly affect Pippy.</li> <li>Other: Other commands.</li> </ul>"},{"location":"reference/command-line/#project","title":"Project","text":"<p><code>pippy reinit</code> Re-activates a Virtual Enviroment that Pippy may have set up.</p>"}]}